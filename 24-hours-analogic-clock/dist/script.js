(function() {
  var Clock, clock;

  Clock = (function() {
    var Colors, HandProps, Palette;

    class Clock {
      constructor(params) {
        this.color = Colors.element;
        this.color_second = Colors.second;
        this.h_size = 22;
        this.m_size = 11;
        this.effect_width = 2;
        this.hand_props_hour = HandProps.hour24;
        this.palette = 'brightlava';
        if (params === void 0) {
          params = {};
        }
        if (params.color !== void 0) {
          this.color = params.color;
        }
        if (params.color_second !== void 0) {
          this.color_second = params.color_second;
        }
        if (params.canvas !== void 0) {
          this.canvas = params.canvas;
        }
        if (params.parent !== void 0 && this.canvas === void 0) {
          this.parent = params.parent;
        }
        if (params.width !== void 0) {
          this.width = params.width;
        }
        if (params.height !== void 0) {
          this.height = params.height;
        }
        if (params.h_size !== void 0) {
          this.h_size = params.h_size;
        }
        if (params.m_size !== void 0) {
          this.m_size = params.m_size;
        }
        if (params.effect_width !== void 0) {
          this.effect_width = params.effect_width;
        }
        if (params.use_12 !== void 0) {
          if (params.use_12) {
            this.hand_props_hour = HandProps.hour12;
          }
        }
        if (params.palette !== void 0) {
          this.palette = params.palette;
        }
        if (params.events !== void 0) {
          this.events = params.events;
        }
        if (this.width === void 0) {
          if (this.canvas === void 0) {
            this.width = 500;
          } else {
            this.width = this.canvas.width;
          }
        }
        if (this.height === void 0) {
          if (this.canvas === void 0) {
            this.height = 500;
          } else {
            this.height = this.canvas.height;
          }
        }
        if (this.canvas !== void 0) {
          if (this.parent === void 0) {
            this.parent = this.canvas.parentElement;
          }
        }
        if (this.canvas === void 0) {
          if (this.parent === void 0) {
            this.parent = document.body;
          }
          this.canvas = document.createElement('canvas');
          this.parent.appendChild(this.canvas);
        }
        this.canvas.width = this.width;
        this.canvas.height = this.height;
        //console.log([@canvas, @parent])
        //window.x = [@canvas, @parent]
        this.ctx = this.canvas.getContext('2d');
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';
        this.clock_radius = Math.min(this.ctx.canvas.width, this.ctx.canvas.height) / 2;
        return;
      }

      clean() {
        // clear canvas function
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.ctx.translate(this.ctx.canvas.width / 2, this.ctx.canvas.height / 2);
      }

      with_effect(color, code) {
        var i, index, j, ref, ref1;
        if (this.effect_width > 0) {
          for (index = i = 1, ref = this.effect_width; (1 <= ref ? i <= ref : i >= ref); index = 1 <= ref ? ++i : --i) {
            this.save();
            this.ctx.translate(0, index);
            this.ctx.fillStyle = Colors.shadow;
            this.ctx.globalAlpha = 0.5;
            code();
            this.restore();
          }
          for (index = j = 1, ref1 = this.effect_width; (1 <= ref1 ? j <= ref1 : j >= ref1); index = 1 <= ref1 ? ++j : --j) {
            this.save();
            this.ctx.translate(0, -index);
            this.ctx.fillStyle = Colors.light;
            this.ctx.globalAlpha = 0.5;
            code();
            this.restore();
          }
        }
        this.save();
        this.ctx.fillStyle = color;
        code();
        this.restore();
      }

      get_theta(value, hand_props) {
        return (value - hand_props.offset) * 2 * Math.PI / (hand_props.end - hand_props.begin + 1);
      }

      get_xy(length, theta) {
        return [this.clock_radius * length * Math.cos(theta), this.clock_radius * length * Math.sin(theta)];
      }

      iterate_on_hand(hand_props, code) {
        var i, ref, ref1, theta, value;
        for (value = i = ref = hand_props.begin, ref1 = hand_props.end; (ref <= ref1 ? i <= ref1 : i >= ref1); value = ref <= ref1 ? ++i : --i) {
          theta = this.get_theta(value, hand_props);
          code(value, hand_props, theta);
        }
      }

      draw_hand(value, hand_props, width, length, color) {
        var theta;
        theta = this.get_theta(value, hand_props);
        return this.with_effect(color, () => {
          this.ctx.rotate(theta);
          this.ctx.beginPath();
          this.ctx.moveTo(-15, -width);
          this.ctx.lineTo(-15, width);
          this.ctx.lineTo(this.clock_radius * length, 1);
          this.ctx.lineTo(this.clock_radius * length, -1);
          this.ctx.fill();
        });
      }

      draw_tick(value, theta, radius, length, color) {
        var x, y;
        [x, y] = this.get_xy(length, theta);
        return this.with_effect(color, () => {
          this.ctx.beginPath();
          this.ctx.arc(x, y, radius, 0, Math.PI * 2, true);
          this.ctx.closePath();
          this.ctx.fill();
        });
      }

      draw_text(value, theta, text_size, length, color) {
        var x, y;
        [x, y] = this.get_xy(length, theta);
        return this.with_effect(color, () => {
          this.ctx.font = text_size + 'px Sans-Serif';
          this.ctx.fillText(value, x, y);
        });
      }

      draw_arc(hour1, hour2, hand_props, length_min, length_max, color) {
        var radius_max, radius_min, theta1, theta2;
        theta1 = this.get_theta(hour1, hand_props);
        theta2 = this.get_theta(hour2, hand_props);
        radius_min = this.clock_radius * length_min;
        radius_max = this.clock_radius * length_max;
        return this.with_effect(color, () => {
          this.ctx.globalAlpha = 0.4;
          this.ctx.beginPath();
          this.ctx.arc(0, 0, radius_max, theta1, theta2, false);
          this.ctx.arc(0, 0, radius_min, theta2, theta1, true);
          this.ctx.closePath();
          this.ctx.fill();
        });
      }

      draw_event(event) {
        var hour_range, i, len, ref;
        ref = event.hour_ranges;
        for (i = 0, len = ref.length; i < len; i++) {
          hour_range = ref[i];
          this.draw_arc(hour_range[0], hour_range[1], this.hand_props_hour, 0.2 + 0.05 * event.level, 0.3 + 0.05 * event.level, Palette[this.palette][event.color_index]);
        }
      }

      draw_events(events) {
        var event, i, len;
        for (i = 0, len = events.length; i < len; i++) {
          event = events[i];
          this.draw_event(event);
        }
      }

      save() {
        this.ctx.save();
      }

      restore() {
        this.ctx.restore();
      }

      draw_scene() {
        var date, hours, minutes, numHour, numMinute, seconds;
        this.save();
        this.clean();
        date = new Date();
        hours = date.getHours();
        minutes = date.getMinutes();
        seconds = date.getSeconds();
        numMinute = minutes + seconds / 60;
        numHour = hours + numMinute / 60;
        this.iterate_on_hand(this.hand_props_hour, (value, hand_props, theta) => {
          this.draw_tick(value, theta, 1, 0.6, this.color);
          this.draw_text(value, theta, this.h_size, 0.68, this.color);
        });
        this.iterate_on_hand(HandProps.minute, (value, hand_props, theta) => {
          if (value % 5 === 0) {
            this.draw_text(value, theta, this.m_size, 0.89, this.color);
          } else {
            this.draw_tick(value, theta, 1, 0.89, this.color);
          }
        });
        if (this.events !== void 0) {
          this.draw_events(this.events);
        }
        this.draw_hand(numHour, this.hand_props_hour, 5, 0.5, this.color);
        this.draw_hand(numMinute, HandProps.minute, 4, 0.8, this.color);
        this.draw_hand(seconds, HandProps.second, 3, 0.9, this.color_second);
        this.restore();
      }

      start() {
        setInterval((() => {
          this.draw_scene();
        }), 1000);
      }

    };

    HandProps = {
      hour12: {
        begin: 1,
        end: 12,
        offset: 3
      },
      hour24: {
        begin: 0,
        end: 23,
        offset: 18
      },
      minute: {
        begin: 1,
        end: 60,
        offset: 15
      },
      second: {
        begin: 1,
        end: 60,
        offset: 15
      }
    };

    Colors = {
      light: '#fff',
      shadow: '#000',
      element: '#333',
      second: '#f00'
    };

    Palette = {
      brightlava: ['#300303', '#490a04', '#611405', '#792306', '#913608', '#aa4c09', '#c2660a', '#da840b', '#f2a60d', '#f4c025', '#f5d63d', '#f6e955', '#f7f76e'],
      sunset: ['#000066', '#150080', '#330099', '#5900b3', '#8800cc', '#bf00e6', '#ff00ff', '#ff1ad9', '#ff33bb', '#ff4da6', '#ff6699', '#ff8095', '#ff9999'],
      sunset2: ['#090317', '#1c0634', '#390950', '#5e0c6d', '#8a0f86', '#a61286', '#c3167e', '#e0196c', '#e8305b', '#eb4d55', '#ee7c6a', '#f2a887', '#f5cca3'],
      autumn: ['#001a00', '#063300', '#134d00', '#266600', '#408000', '#609900', '#86b300', '#b3cc00', '#e5e600', '#ffdf00', '#ffc61a', '#ffb333', '#ffa64d']
    };

    return Clock;

  }).call(this);

  // $(document).ready ->
  clock = new Clock({
    // canvas: $('#canvas')[0]
    // parent: $('.clocks')[0]
    color: '#333',
    effect_width: 1,
    use_12: false,
    width: 500,
    height: 500,
    h_size: 22,
    m_size: 11,
    palette: 'sunset2',
    // palette: 'brightlava'
    events: [
      {
        hour_ranges: [[8,
      12],
      [13,
      17]],
        level: 1,
        color_index: 3
      },
      {
        hour_ranges: [[11,
      12],
      [13,
      20]],
        level: 2,
        color_index: 6
      },
      {
        hour_ranges: [[22,
      5]],
        level: 3,
        color_index: 9
      },
      {
        hour_ranges: [[7.9,
      9]],
        level: 4,
        color_index: 12
      }
    ]
  });

  clock.start();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript